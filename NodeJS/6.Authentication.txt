Mã hóa mật khẩu:
> npm i bcryptjs

userSchema.pre('save', async function(next) {
  // Only run this function if password was actually modified
  if (!this.isModified('password')) return next();

  // Hash the password with cost of 12
  this.password = await bcrypt.hash(this.password, 12);

  // Delete passwordConfirm field
  this.passwordConfirm = undefined;
  next();
});

==================================================================================================================================================================
Json Web Token: authentication
user giử email, password với post request login đến server, server trả về user 1 mã JST được lưu lại ở cookie hoặc localStorage của user
mỗi khi user truy cập 1 route sẽ giử kèm mã JWT được cung cấp, server nhận mã JWT xác thực xem mã hợp lệ không, nếu hợp lệ sẽ giử data cho user
tất cả phải diễn ra trên giao thức HTTPS
> npm i jsonwebtoken

============= LOGIN, SIGNUP, SEND TOKEN===============

// userModel.js

password: {
    type: String,
    required: [true, 'Please provide a password'],
    minlength: 8,
    select: false
  }
///////////////////
// instace method, tồn tại trên toàn bộ documents của collection
// so sánh password người dùng nhập vào với password trên document
userSchema.methods.correctPassword = async function(
  cadidatePassword,
  userPassword
) {
  // this keyword trỏ đến document hiện tại
  // tuy nhiên do set select password = false => this.password không lấy ra được
  return await bcrypt.compare(cadidatePassword, userPassword);
};

// authController.js

const signToken = id => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN
  });
  // đưa _id vào token giử cho người dùng
};

exports.signup = catchAsync(async (req, res, next) => {
  // const newUser = await User.create(req.body);
  const newUser = await User.create({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
    passwordConfirm: req.body.passwordConfirm
  });

  const token = signToken(newUser._id);

  res.status(201).json({
    status: 'success',
    token,
    data: { user: newUser }
  });
});

exports.login = catchAsync(async (req, res, next) => {
  const { email, password } = req.body;

  // 1) Check if email and password exist
  if (!email || !password) {
    return next(new AppError('Please provide email and password!', 400));
    // phải return để tránh nhận được 2 response
  }
  // 2) Check if user exists && password is correct
  const user = await User.findOne({ email }).select('+password');
  // password set select: false =>  .select('+password') để láy thêm field password
  // đưa (await user.correctPassword(password, user.password)) vào if để tránh khi không tồn tại user sẽ tự động bỏ qua kiểm tra password
  if (!user || !(await user.correctPassword(password, user.password))) {
    // gọi instance của userModel để so sánh password
    // nếu không có user hay password không khớp, trả về lỗi
    return next(new AppError('Incorrect email or password', 401));
  }

  // 3) If everything ok, send token to client
  const token = signToken(user._id);

  res.status(201).json({
    status: 'success',
    token
  });
});





















